import os
import json
import requests
import time
import threading

# üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.json, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if os.path.exists("settings.json"):
    with open("settings.json", "r") as f:
        SETTINGS = json.load(f)
else:
    SETTINGS = {
        "threshold": 6.0,
        "poll_interval": 10,
        "monitoring": False
    }

# üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("7618687590:AAH7tyDsI5WrRK7h_EQUusE2ziUlt6ijhk4")
ADMIN_ID = int(os.getenv("5496665478"))  # –µ—Å–ª–∏ –Ω–µ—Ç, –±—É–¥–µ—Ç 0
API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

last_update_id = 0
last_prices = {}


# üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_message(chat_id, text):
    try:
        requests.post(f"{API_URL}/sendMessage", data={"chat_id": chat_id, "text": text})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


# üì® –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤
def get_updates(offset=None):
    try:
        resp = requests.get(f"{API_URL}/getUpdates", params={"timeout": 100, "offset": offset})
        return resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {}


# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤ MEXC
def get_mexc_futures_tickers():
    try:
        url = "https://contract.mexc.com/api/v1/contract/ticker"
        res = requests.get(url, timeout=15)
        if res.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ MEXC Futures API: —Å—Ç–∞—Ç—É—Å {res.status_code}")
            return []
        data = res.json().get("data", [])
        return [t for t in data if t.get("symbol", "").endswith("_USDT")]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ MEXC Futures API: {e}")
        return []


# üîÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ pump/dump
def monitor_market():
    global last_prices

    while SETTINGS["monitoring"]:
        tickers = get_mexc_futures_tickers()
        if not tickers:
            time.sleep(SETTINGS["poll_interval"])
            continue

        for t in tickers:
            try:
                symbol = t["symbol"].replace("_", "")
                price = float(t["lastPrice"])
                prev = last_prices.get(symbol)
                last_prices[symbol] = price

                if prev:
                    change = (price - prev) / prev * 100
                    if abs(change) >= SETTINGS["threshold"]:
                        if change > 0:
                            msg = f"üöÄ PUMP –Ω–∞ {symbol}: +{change:.2f}% ‚Äî SHORT –∑–æ–Ω–∞"
                        else:
                            msg = f"üí• DUMP –Ω–∞ {symbol}: {change:.2f}% ‚Äî LONG –∑–æ–Ω–∞"
                        send_message(ADMIN_ID, msg)
            except Exception:
                continue

        time.sleep(SETTINGS["poll_interval"])


# ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
def handle_command(text):
    global SETTINGS

    parts = text.strip().split()
    cmd = parts[0].lower()

    if cmd == "/start":
        if SETTINGS["monitoring"]:
            return "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
        SETTINGS["monitoring"] = True
        threading.Thread(target=monitor_market, daemon=True).start()
        return "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–æ–≤ MEXC –∑–∞–ø—É—â–µ–Ω!"

    elif cmd == "/stop":
        SETTINGS["monitoring"] = False
        return "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

    elif cmd == "/test":
        return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MEXC Futures!"

    elif cmd == "/settings":
        s = "\n".join(f"{k}: {v}" for k, v in SETTINGS.items())
        return f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{s}"

    elif cmd == "/set":
        if len(parts) < 3:
            return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ"
        key, value = parts[1], parts[2]
        if key not in SETTINGS:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä."
        try:
            if key in ("threshold", "poll_interval"):
                value = float(value)
        except ValueError:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
        SETTINGS[key] = value
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
        with open("settings.json", "w") as f:
            json.dump(SETTINGS, f, indent=4)
        return f"‚úÖ {key} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {value}"

    elif cmd == "/help":
        return (
            "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/set –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä\n"
            "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        )

    else:
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏ /help."


# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Telegram-–±–æ—Ç–∞
def main():
    global last_update_id
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥ –≤ Telegram...")

    while True:
        updates = get_updates(last_update_id + 1)
        if "result" in updates:
            for update in updates["result"]:
                last_update_id = update["update_id"]
                if "message" in update:
                    chat_id = update["message"]["chat"]["id"]
                    text = update["message"].get("text", "")
                    reply = handle_command(text)
                    if reply:
                        send_message(chat_id, reply)
        time.sleep(1)


if __name__ == "__main__":
    main()
