import os
import json
import requests
import time
import threading

# =======================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# =======================
SETTINGS_FILENAME = "settings.json"

def save_settings(all_settings):
    try:
        with open(SETTINGS_FILENAME, "w", encoding="utf-8") as f:
            json.dump(all_settings, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ settings.json: {e}")

if os.path.exists(SETTINGS_FILENAME):
    try:
        with open(SETTINGS_FILENAME, "r", encoding="utf-8") as f:
            ALL_SETTINGS = json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è settings.json: {e}")
        ALL_SETTINGS = {}
else:
    ALL_SETTINGS = {}

DEFAULT_SETTINGS = {
    "threshold": 6.0,
    "poll_interval": 10,
    "monitoring": False,
    "timeframe": "1m"
}

def get_user_settings(chat_id):
    cid = str(chat_id)
    if cid not in ALL_SETTINGS:
        ALL_SETTINGS[cid] = DEFAULT_SETTINGS.copy()
        save_settings(ALL_SETTINGS)
    return ALL_SETTINGS[cid]


# =======================
# üîê TELEGRAM API
# =======================
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
try:
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
except Exception:
    ADMIN_ID = 0

if not TELEGRAM_TOKEN:
    print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway.")

API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}" if TELEGRAM_TOKEN else None

last_update_id = 0
last_prices = {}

PARAM_NAMES = {
    "threshold": "–ø–æ—Ä–æ–≥",
    "poll_interval": "–∏–Ω—Ç–µ—Ä–≤–∞–ª",
    "monitoring": "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
    "timeframe": "—Ç–∞–π–º—Ñ—Ä–µ–π–º"
}
PARAM_NAMES_RU = {v: k for k, v in PARAM_NAMES.items()}


# =======================
# üì© Telegram —Ñ—É–Ω–∫—Ü–∏–∏
# =======================
def send_message(chat_id, text):
    if not API_URL:
        print(f"send_message: Telegram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        return
    try:
        r = requests.post(f"{API_URL}/sendMessage", data={"chat_id": chat_id, "text": text})
        if r.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ Telegram ({r.status_code}): {r.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


def get_updates(offset=None, timeout=100):
    if not API_URL:
        return {}
    try:
        resp = requests.get(f"{API_URL}/getUpdates", params={"timeout": timeout, "offset": offset})
        return resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {}


# =======================
# üìä –î–∞–Ω–Ω—ã–µ MEXC
# =======================
def get_mexc_futures_tickers():
    try:
        url = "https://contract.mexc.com/api/v1/contract/ticker"
        res = requests.get(url, timeout=15)
        if res.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ MEXC Futures API: {res.status_code}")
            return []
        data = res.json().get("data", [])
        return [t for t in data if isinstance(t, dict) and t.get("symbol", "").endswith("_USDT")]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ MEXC Futures API: {e}")
        return []


# =======================
# üü¢ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì
# =======================
def global_monitor():
    global last_prices, ALL_SETTINGS
    print("üì° –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            active = [uid for uid, s in ALL_SETTINGS.items() if isinstance(s, dict) and s.get("monitoring")]
            if not active:
                time.sleep(5)
                continue

            poll_intervals = [s.get("poll_interval", 10) for uid, s in ALL_SETTINGS.items() if isinstance(s, dict) and s.get("monitoring")]
            poll_interval = min(poll_intervals) if poll_intervals else 10

            thresholds = [s.get("threshold", 6.0) for uid, s in ALL_SETTINGS.items() if isinstance(s, dict) and s.get("monitoring")]
            global_threshold = min(thresholds) if thresholds else 6.0

            tickers = get_mexc_futures_tickers()
            if not tickers:
                time.sleep(poll_interval)
                continue

            for t in tickers:
                if not isinstance(t, dict):
                    continue

                symbol = t.get("symbol", "").replace("_", "")
                price_str = t.get("lastPrice")
                if not price_str:
                    continue

                try:
                    price = float(price_str)
                except:
                    continue

                prev = last_prices.get(symbol)
                last_prices[symbol] = price

                if prev and prev > 0:
                    change = (price - prev) / prev * 100
                    if abs(change) >= global_threshold:
                        if change > 0:
                            msg = f"üöÄ PUMP –Ω–∞ {symbol}: +{change:.2f}% ‚Äî SHORT –∑–æ–Ω–∞"
                        else:
                            msg = f"üí• DUMP –Ω–∞ {symbol}: {change:.2f}% ‚Äî LONG –∑–æ–Ω–∞"
                        for uid in active:
                            send_message(uid, msg)

            time.sleep(poll_interval)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ global_monitor: {e}")
            time.sleep(5)


# =======================
# üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
# =======================
def handle_command(chat_id, text):
    user_settings = get_user_settings(chat_id)
    parts = text.strip().split()
    if not parts:
        return None
    cmd = parts[0].lower()

    if cmd == "/start":
        if user_settings.get("monitoring"):
            return "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
        user_settings["monitoring"] = True
        save_settings(ALL_SETTINGS)
        return "‚úÖ –¢—ã –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –æ–±—â–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Å–∏–≥–Ω–∞–ª–æ–≤ MEXC!"

    elif cmd == "/stop":
        user_settings["monitoring"] = False
        save_settings(ALL_SETTINGS)
        return "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

    elif cmd == "/test":
        return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MEXC Futures!"

    elif cmd == "/settings":
        lines = []
        for k, v in user_settings.items():
            ru_name = PARAM_NAMES.get(k, k)
            if k == "threshold":
                lines.append(f"{ru_name}: {v}%")
            elif k == "monitoring":
                lines.append(f"{ru_name}: {'–í–∫–ª—é—á–µ–Ω' if v else '–í—ã–∫–ª—é—á–µ–Ω'}")
            else:
                lines.append(f"{ru_name}: {v}")
        return "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" + "\n".join(lines)

    elif cmd == "/set":
        if len(parts) < 3:
            return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–æ—Ä–æ–≥, –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Ç–∞–π–º—Ñ—Ä–µ–π–º"
        param_input = parts[1].lower()
        value = parts[2]
        if param_input in PARAM_NAMES_RU:
            key = PARAM_NAMES_RU[param_input]
        elif param_input in user_settings:
            key = param_input
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: –ø–æ—Ä–æ–≥, –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Ç–∞–π–º—Ñ—Ä–µ–π–º"

        try:
            if key in ("threshold", "poll_interval"):
                user_settings[key] = float(value)
            elif key == "timeframe":
                user_settings[key] = str(value)
            save_settings(ALL_SETTINGS)
            ru_name = PARAM_NAMES.get(key, key)
            return f"‚úÖ {ru_name} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {value}"
        except ValueError:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."

    elif cmd == "/help":
        return (
            "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/stop ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/set –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä\n"
            "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        )

    else:
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏ /help."


# =======================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Telegram polling
# =======================
def main():
    global last_update_id
    print("üöÄ Telegram polling –∑–∞–ø—É—â–µ–Ω...")
    while True:
        updates = get_updates(last_update_id + 1)
        if "result" in updates:
            for update in updates["result"]:
                try:
                    last_update_id = update["update_id"]
                    if "message" in update:
                        chat_id = update["message"]["chat"]["id"]
                        text = update["message"].get("text", "")
                        reply = handle_command(chat_id, text)
                        if reply:
                            send_message(chat_id, reply)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ update: {e}")
        time.sleep(0.5)


# =======================
# üß© –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ
# =======================
if __name__ == "__main__":
    print("üì° –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ Telegram polling...")
    threading.Thread(target=global_monitor, daemon=True).start()
    time.sleep(2)
    main()
